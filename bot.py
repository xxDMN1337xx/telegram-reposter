import asyncio
import os
import re
import pymorphy2
import g4f
from telethon import TelegramClient, events
from telethon.tl.types import MessageEntity
from config import API_ID, API_HASH, SESSION_NAME

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CHANNEL_GOOD = 'https://t.me/fbeed1337'
CHANNEL_TRASH = 'https://t.me/musoradsxx'
MAX_CAPTION_LENGTH = 1000
MAX_MESSAGE_LENGTH = 4000

# === –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã GPT (—Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É –Ω–æ–≤–æ–º—É —Å–ø–∏—Å–∫—É)
fallback_providers = [
    g4f.Provider.AnyProvider,
    g4f.Provider.Blackbox,
    g4f.Provider.Chatai,
    g4f.Provider.CohereForAI_C4AI_Command,
    g4f.Provider.Copilot,
    g4f.Provider.CopilotAccount,
    g4f.Provider.Free2GPT,
    g4f.Provider.Qwen_Qwen_2_5,
    g4f.Provider.Qwen_Qwen_2_5_Max,
    g4f.Provider.Qwen_Qwen_2_72B,
    g4f.Provider.TeachAnything,
    g4f.Provider.WeWordle,
    g4f.Provider.Yqcloud,
]

# === –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è GPT
def sanitize_input(text):
    text = re.sub(r'https?://\S+', '[—Å—Å—ã–ª–∫–∞]', text)
    text = re.sub(r'[^\w–∞-—è–ê-–Ø—ë–Å.,:;!?%()\-‚Äì‚Äî\n ]+', '', text)
    return text.strip()[:2000]

# === –õ–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
filter_words = set()
morph = pymorphy2.MorphAnalyzer(lang='ru')

def load_filter_words():
    global filter_words
    if os.path.exists('filter_words.txt'):
        with open('filter_words.txt', 'r', encoding='utf-8') as f:
            filter_words.clear()
            for line in f:
                word = line.strip().lower()
                if word:
                    lemma = morph.parse(word)[0].normal_form
                    filter_words.add(lemma)

def normalize_text(text):
    words = text.lower().split()
    return {morph.parse(word)[0].normal_form for word in words}

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ GPT (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤)
async def check_with_gpt(text: str, client) -> str:
    clean_text = sanitize_input(text.replace('"', "'").replace("\n", " "))
    prompt = (
        "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –æ—Ç–±–∏—Ä–∞—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –ø–æ –∞—Ä–±–∏—Ç—Ä–∞–∂—É —Ç—Ä–∞—Ñ–∏–∫–∞.\n\n"
        "–¢–µ–±–µ –ù–ï–õ–¨–ó–Ø –¥–æ–ø—É—Å–∫–∞—Ç—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã –ø–æ—Å—Ç–æ–≤:\n"
        "- –ª–∏—á–Ω—ã–µ –ø–æ—Å—Ç—ã (–æ –∂–∏–∑–Ω–∏, –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –ø–æ–≥–æ–¥–µ, –º–Ω–µ–Ω–∏—è, —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è, —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è)\n"
        "- –æ–±—â–∞—è —Ä–µ–∫–ª–∞–º–∞ –∏ –Ω–µ—Ü–µ–ª–µ–≤—ã–µ –æ—Ñ—Ñ–µ—Ä—ã\n"
        "- –ª—é–±—ã–µ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–µ –∏ –Ω–∏ –æ —á—ë–º —Ç–µ–∫—Å—Ç—ã, –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö\n"
        "- –∏–Ω—Ç–µ—Ä–≤—å—é, –ø–æ–¥–∫–∞—Å—Ç—ã, –±–µ—Å–µ–¥—ã, –≤–∏–¥–µ–æ–∏–Ω—Ç–µ—Ä–≤—å—é\n"
        "- —Ä–æ–∑—ã–≥—Ä—ã—à–∏, –∫–æ–Ω–∫—É—Ä—Å—ã, –ø—Ä–∏–∑—ã, –ø–æ–¥–∞—Ä–∫–∏\n"
        "- –ø–æ—Å—Ç—ã –ø—Ä–æ –≤–µ—á–µ—Ä–∏–Ω–∫–∏, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏, —Å–æ–±—Ä–∞–Ω–∏—è, –º–∏—Ç–∞–ø—ã, —Ç—É—Å–æ–≤–∫–∏ –∏ —Å—Ö–æ–¥–∫–∏\n"
        "- –ª–æ–Ω–≥—Ä–∏–¥—ã –∏–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏: –±–µ–∑ —Å–≤—è–∑–æ–∫, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, —Ü–∏—Ñ—Ä –∏–ª–∏ –∫–µ–π—Å–æ–≤\n"
        "- –∂–∞–ª–æ–±—ã, –Ω–∞–±–ª—é–¥–µ–Ω–∏—è, –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ä—ã–Ω–∫–∞, ¬´—ç–≤–æ–ª—é—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞¬ª –∏ —Ç.–¥.\n\n"
        "–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:\n"
        "- –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–ª—å–∑—É –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤: –∫–µ–π—Å—ã, —Å—Ö–µ–º—ã, –∏–Ω—Å–∞–π—Ç—ã, —Ü–∏—Ñ—Ä—ã, —Å–æ–≤–µ—Ç—ã, —Ç–∞–±–ª–∏—Ü—ã\n"
        "- –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–≤—è–∑–∫–∏, –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞, –ø–æ–¥—Ö–æ–¥—ã, –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤\n"
        "- –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, —Å–ø–∞–π, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é, API, —Å–∫—Ä–∏–ø—Ç—ã, –ø–∞—Ä—Å–µ—Ä—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "- –æ–±–∑–æ—Ä—ã –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏ –æ–± –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö (SkyReels, Scira, Sora, ChatGPT, MidJourney, Runway –∏ —Ç.–¥.)\n"
        "- –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º, —Ç—Ä–µ–∫–µ—Ä–∞–º, –±–∞–Ω–∞–º, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º, –ø–ª–∞—Ç—ë–∂–∫–∞–º –∏ —Ç.–¥.\n\n"
        "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–ª—å–∑—ã ‚Äî —Å—á–∏—Ç–∞–π –µ–≥–æ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–º.\n"
        "–ù–µ –±—É–¥—å –º—è–≥–∫–∏–º. –û—Ç—Å–µ–∏–≤–∞–π –≤—Å—ë, —á—Ç–æ –Ω–µ –¥–∞—Å—Ç –≤—ã–≥–æ–¥—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫—É.\n\n"
        f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n\"{clean_text}\"\n\n"
        "–û—Ç–≤–µ—Ç—å **–æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º**, –≤—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ –∏–∑: —Ä–µ–∫–ª–∞–º–∞, –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ, –ø–æ–ª–µ–∑–Ω–æ."
    )

    # 7. –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–∑–æ–≤–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    async def call_provider(provider, index):
        # –ü–æ–ø—ã—Ç–∫–∞ 1: –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
        try:
            response = await asyncio.wait_for(
                asyncio.to_thread(
                    g4f.ChatCompletion.create,
                    provider=provider,
                    messages=[{"role": "user", "content": prompt}]
                ), timeout=30
            )
            result = (response or "").strip().lower()
            result = re.sub(r'[^–∞-—è–ê-–Ø]', '', result)
            if result in ['—Ä–µ–∫–ª–∞–º–∞', '–±–µ—Å–ø–æ–ª–µ–∑–Ω–æ', '–ø–æ–ª–µ–∑–Ω–æ']:
                await client.send_message(CHANNEL_TRASH, f"{index+1}/{len(fallback_providers)} ‚úÖ {provider.__name__} (auto): {result}")
                return result
        except Exception:
            pass # –û—à–∏–±–∫–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç

        # –ü–æ–ø—ã—Ç–∫–∞ 2: —Å –º–æ–¥–µ–ª—å—é 'gpt-3.5'
        try:
            response = await asyncio.wait_for(
                asyncio.to_thread(
                    g4f.ChatCompletion.create,
                    provider=provider,
                    model="gpt-3.5",
                    messages=[{"role": "user", "content": prompt}]
                ), timeout=30
            )
            result = (response or "").strip().lower()
            result = re.sub(r'[^–∞-—è–ê-–Ø]', '', result)
            if result in ['—Ä–µ–∫–ª–∞–º–∞', '–±–µ—Å–ø–æ–ª–µ–∑–Ω–æ', '–ø–æ–ª–µ–∑–Ω–æ']:
                await client.send_message(CHANNEL_TRASH, f"{index+1}/{len(fallback_providers)} ‚úÖ {provider.__name__} (gpt-3.5): {result}")
                return result
            else:
                await client.send_message(CHANNEL_TRASH, f"{index+1}/{len(fallback_providers)} ‚ö†Ô∏è {provider.__name__} —Å—Ç—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: '{result}'")

        except Exception as e:
            await client.send_message(CHANNEL_TRASH, f"{index+1}/{len(fallback_providers)} ‚ùå {provider.__name__} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {str(e)[:100]}")
        
        return None # –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Å–º–æ–≥ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç

    tasks = [call_provider(p, i) for i, p in enumerate(fallback_providers)]
    raw_results = await asyncio.gather(*tasks)

    summary = {"–ø–æ–ª–µ–∑–Ω–æ": 0, "—Ä–µ–∫–ª–∞–º–∞": 0, "–±–µ—Å–ø–æ–ª–µ–∑–Ω–æ": 0}
    for r in raw_results:
        if r in summary:
            summary[r] += 1
    
    total_valid = sum(summary.values())
    if total_valid == 0:
        await client.send_message(CHANNEL_TRASH, "‚ùå –ù–∏ –æ–¥–∏–Ω GPT-–ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç.")
        await asyncio.sleep(1800)
        return await check_with_gpt(text, client)

    await client.send_message(CHANNEL_TRASH, f"üìä –°–≤–æ–¥–∫–∞: {summary}")

    if summary["–ø–æ–ª–µ–∑–Ω–æ"] > (summary["—Ä–µ–∫–ª–∞–º–∞"] + summary["–±–µ—Å–ø–æ–ª–µ–∑–Ω–æ"]):
        return "–ø–æ–ª–µ–∑–Ω–æ"
    else:
        return "–º—É—Å–æ—Ä"

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
async def get_source_info(event, client):
    """ 3. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å—Ç–∏–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–∞–Ω–∞–ª, –æ—Ç–∫—É–¥–∞ –±—ã–ª —Ä–µ–ø–æ—Å—Ç) """
    source_entity = None
    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–ø–æ—Å—Ç, –±–µ—Ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –Ω–µ–≥–æ
    if event.message.fwd_from and getattr(event.message.fwd_from.from_id, 'channel_id', None):
        try:
            source_entity = await client.get_entity(event.message.fwd_from.from_id.channel_id)
        except Exception:
            source_entity = None # –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity
    # –ï—Å–ª–∏ –Ω–µ —Ä–µ–ø–æ—Å—Ç, –±–µ—Ä–µ–º –∏–Ω—Ñ–æ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    elif event.is_channel:
        source_entity = event.chat

    if source_entity:
        if getattr(source_entity, 'username', None):
            return f"https://t.me/{source_entity.username}"
        else:
            title = getattr(source_entity, 'title', 'Unknown Channel')
            channel_id = getattr(source_entity, 'id', 'N/A')
            return f"{title} (ID: {channel_id})"
    return "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"


async def send_copied_message(client, target_channel, messages_to_forward, source_string):
    """ 1, 4, 5. –°–æ–±–∏—Ä–∞–µ—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–µ–ª–∏—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ """
    full_text = ""
    all_entities = []
    media_files = []

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç, –º–µ–¥–∏–∞ –∏ —Å—É—â–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    for msg in sorted(messages_to_forward, key=lambda m: m.id):
        current_len = len(full_text)
        if msg.text:
            text_to_add = msg.text.strip()
            full_text += text_to_add + "\n"
            if msg.entities:
                for entity in msg.entities:
                    entity.offset += current_len
                    all_entities.append(entity)
        if msg.media and not getattr(msg.media, 'poll', None):
            media_files.append(msg.media)
    
    full_text = full_text.strip()
    
    if not full_text and not media_files:
        return # –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º

    # 4. –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    if media_files:
        caption = full_text[:MAX_CAPTION_LENGTH]
        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        caption_entities = [e for e in all_entities if e.offset < len(caption)]
        
        remaining_text = full_text[MAX_CAPTION_LENGTH:].strip()
        
        await client.send_file(
            target_channel,
            file=media_files,
            caption=caption,
            formatting_entities=caption_entities,
            link_preview=False
        )
        
        text_to_send_later = remaining_text
    else:
        text_to_send_later = full_text

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –∫–æ–Ω–µ—Ü –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –∏–ª–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if text_to_send_later:
        final_text = f"{text_to_send_later}\n\n{source_string}"
    else:
        # –ï—Å–ª–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —É—à–µ–ª –≤ –ø–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞, –∏—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        final_text = source_string

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    while final_text:
        part_to_send = final_text[:MAX_MESSAGE_LENGTH]
        final_text = final_text[MAX_MESSAGE_LENGTH:]
        await client.send_message(target_channel, part_to_send, link_preview=False)


# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(event, client):
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –∞ –Ω–µ –∏–∑ —á–∞—Ç–∞ –∏–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not event.is_channel:
        return

    load_filter_words()

    if event.poll or event.voice or event.video_note:
        return

    message_text = event.message.text or ""
    if not message_text.strip() and not event.message.media:
        return
        
    normalized = normalize_text(message_text)
    if filter_words.intersection(normalized):
        return

    result = await check_with_gpt(message_text, client)

    # –°–æ–±–∏—Ä–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_forward = [event.message]
    if event.message.grouped_id:
        async for msg in client.iter_messages(event.chat_id, min_id=event.message.id - 10, max_id=event.message.id + 10):
            if msg.grouped_id == event.message.grouped_id and msg.id != event.message.id:
                messages_to_forward.append(msg)

    target_channel = CHANNEL_GOOD if result == "–ø–æ–ª–µ–∑–Ω–æ" else CHANNEL_TRASH
    
    # 1, 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    source_info = await get_source_info(event, client)
    source_string = f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source_info}"

    # 1, 4, 5. –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    await send_copied_message(client, target_channel, messages_to_forward, source_string)
    print(f"[OK] –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source_info}. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")


# === –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
async def main():
    client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
    print("–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await client.start()
    print("–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")

    @client.on(events.NewMessage(incoming=True))
    async def handler(event):
        try:
            await handle_message(event, client)
        except Exception as e:
            print(f"[!!!] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —Å–µ–±–µ –≤ –õ–° –∏–ª–∏ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
            await client.send_message(CHANNEL_TRASH, f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")


    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
